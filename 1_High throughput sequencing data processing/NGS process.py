from Bio.Seq import Seq
from Bio import SeqIO
import pandas as pd
import numpy as np
import openpyxl
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
import csv

#phescodon 201bp region
Primerbind_1="CTGCACTGAATGCGCGTCT"
Primerbind_2="CCCAGACCTCTGGCGTACA"
#phescodon 417bp region
Primerbind_1="ATATGTCACATCTCGCAGAACTGG"
Primerbind_2="GGCGGCGGAAACGATTGA"

#lacZ_B1toT1 region
Primerbind_1="TCCTTCCCGCCCGGTGCA"
Primerbind_2="GTCTGGGACTGGGTGGAT"

#lacZ_B0 region
Primerbind_1="GCGAGGTGCGGATTGAAAATG"
Primerbind_2="CATGGTGCCAATGAATCGTC"

#lacZ_B5 region
Primerbind_1="CATCCCGCATCTGACCACCAGC"
Primerbind_2="GCAGTGCACGGCAGATACA"


index_list=["1","2","3","4","5"]  ##list of illumina index numbering
bcode_list=["TTTT","AAAA","GGTT","TTCC","CCAA","AAGG"]  ##list of barcode used
bcodedict= {"":0,"TTTT":"1","AAAA":"2","GGTT":"3","TTCC":"4","CCAA":"5","AAGG":"6"}
seqlength=284 ##General length of sequence when eliminating barcode



def num_count_v2(file_path): # count the number of sequences, then print it, return the value
    # file = open(file_path, "r")
    records = SeqIO.index(file_path, "fastq")
    num_sequences = len(records)
    # file.close()
    print(f"Number of sequences: {num_sequences}")
    return num_sequences

def barcode_splitter_step1(i_file_path,barcode,seqnum): # 1. find the seq having proper length, primer binding site and barcode provided. 2. remove the barcode and return it
    filename=i_file_path.split("/")[-1]
    seq=SeqIO.parse(i_file_path,"fastq")
    barcode_count=0
    bcode_len=len(barcode)
    Total_count=0
    print(f"file name: {filename}, barcode {barcode} counting..")
    for s in seq:
        a=len(s.seq)
        seqcheck1=s.seq.find(Primerbind_1) 
        seqcheck2=s.seq.find(Primerbind_2)
        if  a==284:
            if seqcheck1==0 and seqcheck2>0:# Get only seq that have primer binding site
                if s.seq[a-bcode_len:]==barcode:
                    barcode_count=barcode_count+1
                    yield s[:a-bcode_len]
            Total_count=Total_count+1
        else:
            Total_count=Total_count+1

        if Total_count % 3500000 ==0:
            percent=int(100*Total_count/seqnum)
            print(f"{percent}% done")
    print(f"File name:{filename}, In {Total_count} Data, {barcode_count} were found to have barcode {barcode}")

###example of basic file path: "C:/Users/NGS/Exp8"
### then example of input would be "Exp8-{index}"
### output would be "Exp8-{index}-{barcode}"
def barcode_splitter_final(basic_i_file_path,basic_o_file_path): 
    for i in index_list:
        i_file_path=f"{basic_i_file_path}-{i}.fastq"
        seqnum=int(num_count_v2(i_file_path)) #the number of sequence
        for bcode in bcode_list:
            o_file_path=f"{basic_o_file_path}-{i}-{bcode}.fastq"
            bcode_containing=barcode_splitter_step1(i_file_path,bcode,seqnum)
            SeqIO.write(bcode_containing,o_file_path,"fastq")

def readcount_to_xlsx(basic_i_file_path,basic_o_file_path): ###after readcount file was generated by varscan, the file would be converted to xlsx with desired information
    for i in index_list:
        for bcode in bcode_list:
            j=bcodedict[bcode]
            print(f"{i},{j}")
            i_file_path=f"{basic_i_file_path}-{i}_sorted-{bcode}.txt"
            o_file_path=f"{basic_o_file_path}-{i}_{j}.xlsx"
            ##example###
            # path="C:/Users/kfvv1/OneDrive/LOPS/NGS/_5_Set19-2_FinalNGS/"
            # input_name="exp8-1_sorted-AAAA.txt"
            # output_name="_Exp8-1_AAAA_.xlsx"
            
################ convert varscan result to A,T,G,C base count number #######################             
            file=open(i_file_path,"rt")  ## directly change to dataframe was impossbile because of token number error
            reader=csv.reader(file)
            csv_list=[]
            for l in reader: ### datatype of l is list. Change to string type then split by \t to reconvert to list. Finally, append the list to csv_list
                csv_list.append(l[0].split("\t")) 
            file.close()
            df=pd.DataFrame(csv_list)
            df.fillna("x",inplace=True) ### if not, .find function could not be used
            Mutlist=[]
            for ind in df.index:
                if ind==0:
                    list_temp=["A","T","G","C"]
                    Mutlist.append(list_temp)
                    continue
                else:
                    a=0
                    t=0
                    g=0
                    c=0
                for jin in range(5,len(df.columns)): #range of readcount method's mutation count
                    if df.loc[ind,jin].find("A:")==0: #if "A:" exist, split by : then extract count number 
                        a=int(df.loc[ind,jin].split(":")[1])
                    if df.loc[ind,jin].find("T:")==0:
                        t=int(df.loc[ind,jin].split(":")[1])
                    if df.loc[ind,jin].find("G:")==0:
                        g=int(df.loc[ind,jin].split(":")[1])
                    if df.loc[ind,jin].find("C:")==0:
                        c=int(df.loc[ind,jin].split(":")[1])            
                list_temp=[a,t,g,c]
                Mutlist.append(list_temp)
            Mutlist_df=pd.DataFrame(Mutlist)
            
            df_temp=df.loc[:,1:4] ##only obtaining [position, ref_base, depth, q30_depth]
            df2=pd.concat([df_temp,Mutlist_df],axis=1) ## merge base count (A,T,G,C)
 
            new_header=df2.loc[0].to_list()### set header as first column
            df2=df2.loc[1:]
            df2.columns=new_header
            df2=df2.astype({"q30_depth":"int64","depth":"int64","position":"int64"})
            df3=df2.set_index("position") ##change index to position number
            # df3.to_excel(o_file_path, # directory and file name to write
            #             sheet_name = "Sheet3", 
            #             na_rep = 'NaN', 
            #             float_format = "%.2f", 
            #             header = True 
            #             #engine = 'xlsxwriter', 
            #             ) 
            
            
 ###################### Make All mutation type (e.g. GtoA or CtoT) by ratio ######################
            df_=df2
            df_=df_[["position", "ref_base","q30_depth", "A", "T", "G", "C"]]
            df_.head()
            ##### Convert to Ratio #####
            temp_GtoA=[]
            temp_GtoT=[]
            temp_GtoC=[]
            for indx in df_.index:
                if df_.loc[indx,"ref_base"]=="G":
                    temp_GtoA.append(df_.loc[indx,"A"]/df_.loc[indx,"q30_depth"])
                    temp_GtoT.append(df_.loc[indx,"T"]/df_.loc[indx,"q30_depth"])
                    temp_GtoC.append(df_.loc[indx,"C"]/df_.loc[indx,"q30_depth"])
                else :
                    temp_GtoA.append(np.nan)
                    temp_GtoT.append(np.nan)
                    temp_GtoC.append(np.nan)
            df_.loc[:,"GtoA"]=temp_GtoA
            df_.loc[:,"GtoT"]=temp_GtoT
            df_.loc[:,"GtoC"]=temp_GtoC
            temp_AtoT=[]
            temp_AtoG=[]
            temp_AtoC=[]
            for indx in df_.index:
                if df_.loc[indx,"ref_base"]=="A":
                    temp_AtoT.append(df_.loc[indx,"T"]/df_.loc[indx,"q30_depth"])
                    temp_AtoG.append(df_.loc[indx,"G"]/df_.loc[indx,"q30_depth"])
                    temp_AtoC.append(df_.loc[indx,"C"]/df_.loc[indx,"q30_depth"])
                else :
                    temp_AtoT.append(np.nan)
                    temp_AtoG.append(np.nan)
                    temp_AtoC.append(np.nan)
            df_.loc[:,"AtoT"]=temp_AtoT
            df_.loc[:,"AtoG"]=temp_AtoG
            df_.loc[:,"AtoC"]=temp_AtoC

            temp_TtoA=[]
            temp_TtoG=[]
            temp_TtoC=[]
            for indx in df_.index:
                if df_.loc[indx,"ref_base"]=="T":
                    temp_TtoA.append(df_.loc[indx,"A"]/df_.loc[indx,"q30_depth"])
                    temp_TtoG.append(df_.loc[indx,"G"]/df_.loc[indx,"q30_depth"])
                    temp_TtoC.append(df_.loc[indx,"C"]/df_.loc[indx,"q30_depth"])
                else :
                    temp_TtoA.append(np.nan)
                    temp_TtoG.append(np.nan)
                    temp_TtoC.append(np.nan)
            df_.loc[:,"TtoA"]=temp_TtoA
            df_.loc[:,"TtoG"]=temp_TtoG
            df_.loc[:,"TtoC"]=temp_TtoC

            temp_CtoT=[]
            temp_CtoG=[]
            temp_CtoA=[]
            for indx in df_.index:
                if df_.loc[indx,"ref_base"]=="C":
                    temp_CtoT.append(df_.loc[indx,"T"]/df_.loc[indx,"q30_depth"])
                    temp_CtoG.append(df_.loc[indx,"G"]/df_.loc[indx,"q30_depth"])
                    temp_CtoA.append(df_.loc[indx,"A"]/df_.loc[indx,"q30_depth"])
                else :
                    temp_CtoT.append(np.nan)
                    temp_CtoG.append(np.nan)
                    temp_CtoA.append(np.nan)
            df_.loc[:,"CtoT"]=temp_CtoT
            df_.loc[:,"CtoG"]=temp_CtoG
            df_.loc[:,"CtoA"]=temp_CtoA
            
            
####################### convert dataframe to excel ##################
            writer=pd.ExcelWriter(o_file_path,engine='xlsxwriter')
            df3.to_excel(writer, sheet_name="Sheet3") # only containing A,T,G,C data
            df_.to_excel(writer, sheet_name="Sheet1") # also containing mutation information such as Ato T
            writer.close()



"""Barcode splitting example-lacZ B1-T1 region"""
basic_path_bcodesplit="C:/Users/NGS/Exp12"

index_list=["1","2","3","4","5"]
bcode_list=["TTTT","AAAA","GGTT","TTCC","CCAA","AAGG"]
Primerbind_1="TCCTTCCCGCCCGGTGCA"
Primerbind_2="GTCTGGGACTGGGTGGAT"
barcode_splitter_final(basic_path_bcodesplit,basic_path_bcodesplit)
index_list=["6"]
bcode_list=["TTTT","AAAA"]
barcode_splitter_final(basic_path_bcodesplit,basic_path_bcodesplit)


"""Barcode splitting example-lacZ B0 region"""
index_list=["6","7"]
bcode_list=["GGTT","TTCC","CCAA","AAGG"]
Primerbind_1="GCGAGGTGCGGATTGAAAATG"
Primerbind_2="CATGGTGCCAATGAATCGTC"
barcode_splitter_final(basic_path_bcodesplit,basic_path_bcodesplit)


"""varscan_recount result (txt) to excel (xlsx) file example- lacZ """
basic_i_path_excel="C:/Users/NGS/Exp12"
basic_o_path_excel="C:/Users/NGS/_Exp12"

index_list=["1","2","3","4","5","6"]
bcode_list=["TTTT","AAAA","GGTT","TTCC","CCAA","AAGG"]
readcount_to_xlsx(basic_i_path_excel,basic_o_path_excel)

index_list=["7"]
bcode_list=["GGTT","TTCC","CCAA","AAGG"]
readcount_to_xlsx(basic_i_path_excel,basic_o_path_excel)



